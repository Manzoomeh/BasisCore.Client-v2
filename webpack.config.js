const path = require("path");
const CircularDependencyPlugin = require("circular-dependency-plugin");
const UglifyJsPlugin = require("uglifyjs-webpack-plugin");
const express = require("express");
var cors = require("cors");
const apiHttpServer = require("./server/api-server");
const schemaHttpServer = require("./server/schema-server");
const blobHttpServer = require("./server/blob-server");
const assetHttpServer = require("./server/asset-server");

module.exports = (env, options) => {
  return {
    entry: {
      basiscore: {
        import: "./src/index.ts",
        filename: "basiscore.js",
        library: {
          name: "basiscore",
          type: "assign",
        },
      },
      "basiscore.min": {
        import: "./src/index.ts",
        filename: "basiscore.min.js",
        library: {
          name: "basiscore",
          type: "assign",
        },
      },
    },
    devtool: "source-map",
    output: {
      filename: "[name].js",
      clean: true,
    },
    devServer: {
      static: [
        {
          directory: path.resolve(__dirname, "example"),
        },
        {
          directory: path.resolve(__dirname, "node_modules/alasql/dist"),
        },
      ],
      onBeforeSetupMiddleware: function (server) {
        server.app.use(cors());
        server.app.use("/api", apiHttpServer);
        server.app.use("/schema", schemaHttpServer);
        server.app.use("/blob", blobHttpServer);
        server.app.use("/assets", assetHttpServer);
      },
      open: true,
      port: 3000,
    },
    mode: options.mode,
    optimization: {
      minimize: options.mode === "production",
      minimizer: [
        new UglifyJsPlugin({
          include: /\.min\.js$/,
        }),
      ],
    },
    module: {
      rules: [
        {
          test: /\.ts$/,
          use: ["ts-loader"],
          exclude: /\.d\.ts$/,
        },
        {
          test: /\.d\.ts$/,
          use: ["ignore-loader"],
        },
        {
          test: /\.css$/i,
          use: ["style-loader", "css-loader"],
        },
        {
          test: /\.png$/i,
          type: "asset/inline",
        },
        {
          test: /\.html$/i,
          type: "asset/source",
        },
      ],
    },
    resolve: {
      extensions: [".ts", ".d.ts", ".tsx", ".js", ".jsx", ".css", ".png"],
    },
    plugins: [
      new CircularDependencyPlugin({
        // `onStart` is called before the cycle detection starts
        onStart({ compilation }) {
          console.log("start detecting webpack modules cycles");
        },
        // `onDetected` is called for each module that is cyclical
        onDetected({ module: webpackModuleRecord, paths, compilation }) {
          // `paths` will be an Array of the relative module paths that make up the cycle
          // `module` will be the module record generated by webpack that caused the cycle
          if (!paths[0].startsWith("node_modules/d3")) {
            compilation.errors.push(new Error(paths.join(" -> ")));
          }
        },
        // `onEnd` is called before the cycle detection ends
        onEnd({ compilation }) {
          console.log("end detecting webpack modules cycles");
        },
      }),
    ],
  };
};
